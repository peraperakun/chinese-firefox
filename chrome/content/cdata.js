// Generated by CoffeeScript 1.3.3

/*
	Perapera Chinese
	Copyright (C) 2005-2011 Jonathan Zarate
	http://www.polarcloud.com/
	---
	This program is free software you can redistribute it and/or modify
	it under the terms of the GNU General Public License as published by
	the Free Software Foundation either version 2 of the License, or
	(at your option) any later version.
	This program is distributed in the hope that it will be useful,
	but WITHOUT ANY WARRANTY without even the implied warranty of
	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.	See the
	GNU General Public License for more details.
	You should have received a copy of the GNU General Public License
	along with this program if not, write to the Free Software
	Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA	02110-1301	USA
	---
	Please do not change or remove any of the copyrights or links to web pages
	when modifying any of the files.
*/


(function() {
  var exports,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  exports = window;

  exports.ppcData = {
    isReady: false,
    kanjiPos: 0,
    dicList: [],
    loadConfig: function() {
      var addedNew, dic, dic_str, doReinit, done, i, id, ids, order, order2, s, _i, _j, _k, _len, _len1, _len2, _ref, _ref1, _ref2;
      doReinit = false;
      if (this.isReady) {
        this.done();
        doReinit = true;
      }
      if (typeof exports.ppcDicList === 'undefined') {
        exports.ppcDicList = {};
        this.missing = true;
      }
      /*
      		if ppcDicList['kanji@local'] is null) 
      			ppcDicList['kanji@local'] = 
      				name: 'Kanji',
      				id: 'kanji@local',
      				isKanji: true
      		ppcMain.global().ppcDicList = ppcDicList
      */

      this.dicList = [];
      this.kanjiPos = 0;
      done = {};
      order = exports.PCPrefs.getString('dpriority');
      if (order === '') {
        order = 'chineseperakun@gmail.com#|chinese-german@perapera.org#|chinese-french@perapera.org#';
      }
      _ref = order.split('|');
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        dic_str = _ref[_i];
        if (dic_str.match(/^(.+?)#/)) {
          dic = exports.ppcDicList[RegExp.$1];
          if (dic != null) {
            this.dicList.push(dic);
            done[dic.id] = true;
          }
        }
      }
      addedNew = false;
      _ref1 = exports.ppcDicList;
      for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
        id = _ref1[_j];
        if (!done[id]) {
          this.dicList.push(exports.ppcDicList[id]);
          if (id !== "chineseperakun@gmail.com") {
            addedNew = true;
          }
        }
      }
      ids = [];
      order2 = [];
      _ref2 = this.dicList;
      for (i = _k = 0, _len2 = _ref2.length; _k < _len2; i = ++_k) {
        dic = _ref2[i];
        s = dic.id + "#" + dic.name;
        if (dic.version) {
          s += " v" + dic.version;
        }
        order2.push(s);
        if (dic.isKanji) {
          this.kanjiPos = i;
        } else {
          ids.push(dic.id);
        }
      }
      order2 = this.missing ? '' : order2.join('|');
      if (order !== order2) {
        exports.PCPrefs.setString('dpriority', order2);
      }
      if (addedNew) {
        window.openDialog('chrome://cperapera/content/options.xul', '', 'chrome,centerscreen', 'dic');
      }
      if (!(this.dicPath != null)) {
        this.dicPath = {
          ready: false
        };
        try {
          Components.utils["import"]('resource://gre/modules/AddonManager.jsm');
          AddonManager.getAddonsByIDs(ids, function(addons) {
            var a, _l, _len3;
            for (_l = 0, _len3 = addons.length; _l < _len3; _l++) {
              a = addons[_l];
              exports.ppcData.dicPath[a.id] = a.getResourceURI('install.rdf').QueryInterface(Components.interfaces.nsIFileURL).file.parent.path;
            }
            exports.ppcData.dicPath.ready = true;
            return exports.ppcMain.ppcObs.notifyState('dready');
          });
        } catch (ex) {

        }
        return this.dicPath.ready = true;
      } else {
        if (doReinit) {
          return this.init();
        }
      }
    },
    init: function() {
      var dic, i, k, _i, _j, _len, _len1, _ref, _ref1;
      if (this.isReady) {
        return;
      }
      this.kanjiShown = {};
      _ref = exports.ppcConfig.kindex.split(',');
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        k = _ref[_i];
        this.kanjiShown[k] = 1;
      }
      _ref1 = this.dicList;
      for (i = _j = 0, _len1 = _ref1.length; _j < _len1; i = ++_j) {
        dic = _ref1[i];
        if (dic.isKanji) {
          continue;
        }
        if (!(dic.findWord != null) || !(dic.findText != null)) {
          this.dicList[i] = dic = new exports.ppcDic(dic);
        }
        if (typeof dic.open === "function") {
          dic.open();
        }
      }
      return this.isReady = true;
    },
    done: function() {
      var dic, _i, _len, _ref, _results;
      this.isReady = false;
      this.kanjiData = null;
      this.kanjiShown = null;
      this.radData = null;
      _ref = this.dicList;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        dic = _ref[_i];
        _results.push(typeof dic.close === "function" ? dic.close() : void 0);
      }
      return _results;
    },
    selected: 0,
    selectNext: function() {
      this.selected = (this.selected + this.searchSkipped + 1) % this.dicList.length;
      return this.searchSkipped = 0;
    },
    select: function(n) {
      var _i, _ref, _results;
      if (__indexOf.call((function() {
        _results = [];
        for (var _i = 0, _ref = this.dicList.length; 0 <= _ref ? _i <= _ref : _i >= _ref; 0 <= _ref ? _i++ : _i--){ _results.push(_i); }
        return _results;
      }).apply(this), n) < 0) {
        return;
      }
      this.selected = n;
      return this.searchSkipped = 0;
    },
    ch: [0x3092, 0x3041, 0x3043, 0x3045, 0x3047, 0x3049, 0x3083, 0x3085, 0x3087, 0x3063, 0x30FC, 0x3042, 0x3044, 0x3046, 0x3048, 0x304A, 0x304B, 0x304D, 0x304F, 0x3051, 0x3053, 0x3055, 0x3057, 0x3059, 0x305B, 0x305D, 0x305F, 0x3061, 0x3064, 0x3066, 0x3068, 0x306A, 0x306B, 0x306C, 0x306D, 0x306E, 0x306F, 0x3072, 0x3075, 0x3078, 0x307B, 0x307E, 0x307F, 0x3080, 0x3081, 0x3082, 0x3084, 0x3086, 0x3088, 0x3089, 0x308A, 0x308B, 0x308C, 0x308D, 0x308F, 0x3093],
    cv: [0x30F4, 0xFF74, 0xFF75, 0x304C, 0x304E, 0x3050, 0x3052, 0x3054, 0x3056, 0x3058, 0x305A, 0x305C, 0x305E, 0x3060, 0x3062, 0x3065, 0x3067, 0x3069, 0xFF85, 0xFF86, 0xFF87, 0xFF88, 0xFF89, 0x3070, 0x3073, 0x3076, 0x3079, 0x307C],
    cs: [0x3071, 0x3074, 0x3077, 0x307A, 0x307D],
    _wordSearch: function(word, dic, max) {
      var count, dentry, entries, g, gloss, have, i, maxLen, maxTrim, ok, p, r, result, showInf, trueLen, u, v, variants, y, z, _i, _j, _k, _l, _len, _len1, _len2, _ref;
      if (!this.isReady) {
        this.init();
      }
      trueLen = [];
      p = 0;
      r = '';
      for (i = _i = 0, _ref = word.length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
        u = word.charCodeAt(i);
        v = u;
        if (u === 0xFF5E) {
          p = 0;
          continue;
        }
        r += String.fromCharCode(u);
        trueLen[r.length] = i + 1;
        p = v;
      }
      word = r;
      result = {
        data: []
      };
      if (dic.isName) {
        maxTrim = exports.ppcConfig.namax;
        result.names = 1;
      } else {
        maxTrim = exports.ppcConfig.wmax;
      }
      if (max != null) {
        maxTrim = max;
      }
      have = [];
      count = 0;
      maxLen = 0;
      while (word.length > 0) {
        showInf = count !== 0;
        variants = [
          {
            word: word,
            type: 0xFF,
            reason: null
          }
        ];
        for (i = _j = 0, _len = variants.length; _j < _len; i = ++_j) {
          v = variants[i];
          entries = dic.findWord(v.word);
          for (_k = 0, _len1 = entries.length; _k < _len1; _k++) {
            dentry = entries[_k];
            if (have[dentry]) {
              continue;
            }
            ok = true;
            if (dic.hasType && (i > 0)) {
              y = v.type;
              gloss = dentry.split(/[,()]/);
              for (z = _l = 0, _len2 = gloss.length; _l < _len2; z = ++_l) {
                g = gloss[z];
                if ((y & 1) && (g === 'v1')) {
                  break;
                }
                if ((y & 4) && (g === 'adj-i')) {
                  break;
                }
                if ((y & 2) && (g.substr(0, 2) === 'v5')) {
                  break;
                }
                if ((y & 16) && (g.substr(0, 3) === 'vs-')) {
                  break;
                }
                if ((y & 8) && (g === 'vk')) {
                  break;
                }
              }
              ok = z !== gloss.length;
            }
            if (ok && dic.hasType && exports.ppcConfig.hidex && dentry.match(/\/\([^\)]*\bX\b.*?\)/)) {
              ok = false;
            }
            if (ok) {
              if (count >= maxTrim) {
                result.more = 1;
                break;
              }
              have[dentry] = 1;
              count++;
              if (maxLen === 0) {
                maxLen = trueLen[word.length];
              }
              r = null;
              if (v.reason) {
                if (showInf) {
                  r = "&lt " + v.reason + " &lt " + word;
                } else {
                  r = "&lt " + v.reason;
                }
              }
              result.data.push([dentry, r]);
            }
          }
          if (count >= maxTrim) {
            break;
          }
        }
        if (count >= maxTrim) {
          break;
        }
        word = word.slice(0, -1);
      }
      if (result.data.length === 0) {
        return null;
      }
      result.matchLen = maxLen;
      return result;
    },
    wordSearch: function(word, noKanji) {
      var dic, ds, e;
      this.searchSkipped = 0;
      ds = this.selected;
      while (true) {
        dic = this.dicList[ds];
        if ((!noKanji) || (!dic.isKanji)) {
          if (dic.isKanji) {
            e = this.kanjiSearch(word.charAt(0));
          } else {
            e = this._wordSearch(word, dic, null);
          }
          if (e) {
            if (ds !== 0) {
              e.title = dic.name;
            }
            return e;
          }
        }
        this.searchSkipped++;
        ds = (ds + 1) % this.dicList.length;
        if (ds === this.selected) {
          break;
        }
      }
      return null;
    },
    translate: function(text) {
      var ds, e, result;
      result = {
        data: [],
        textLen: text.length
      };
      while (text.length > 0) {
        e = null;
        ds = this.selected;
        while (true) {
          if (!this.dicList[ds].isKanji) {
            e = this._wordSearch(text, this.dicList[ds], 1);
            if (e != null) {
              break;
            }
          }
          ds = (ds + 1) % this.dicList.length;
          if (ds === this.selected) {
            break;
          }
        }
        if (e != null) {
          if (result.data.length >= exports.ppcConfig.wmax) {
            result.more = 1;
            break;
          }
          result.data.push(e.data[0]);
          text = text.slice(e.matchLen);
        } else {
          text = text.slice(1);
        }
      }
      this.searchSkipped = this.selected === this.kanjiPos ? 1 : 0;
      if (result.data.length === 0) {
        return null;
      }
      result.textLen -= text.length;
      return result;
    },
    textSearch: function(text) {
      var d, dic, ds, list, max, r, result, sW, slashText, t, x, _i, _j, _len, _len1, _ref;
      this.searchSkipped = 0;
      if (!this.isReady) {
        this.init();
      }
      text = text.toLowerCase();
      ds = this.selected;
      while (true) {
        dic = this.dicList[ds];
        if (!dic.isKanji) {
          result = {
            data: [],
            reason: [],
            kanji: 0,
            more: 0,
            names: dic.isName
          };
          list = [];
          sW = /[\sW]/;
          slashText = "/" + text + "/";
          _ref = dic.findText(text);
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            r = _ref[_i];
            t = r.replace(/\(.+?\)/g, '').toLowerCase();
            d = t.indexOf(text);
            if (d >= 0) {
              if (t.replace(/\s+/g, '').indexOf(slashText) !== -1) {
                d -= 100;
              } else if (((d === 0) || (sW.test(t.substr(d - 1, 1)))) && (((d + text.length) >= t.length) || (sW.test(t.substr(d + text.length, 1))))) {
                d -= 50;
              }
            } else {
              d = 9999;
            }
            list.push({
              rank: d,
              text: r
            });
          }
          max = dic.isName ? exports.ppcConfig.namax : exports.ppcConfig.wmax;
          list.sort(function(a, b) {
            return a.rank - b.rank;
          });
          for (_j = 0, _len1 = list.length; _j < _len1; _j++) {
            x = list[_j];
            if (result.data.length >= max) {
              result.more = 1;
              break;
            }
            result.data.push([x.text, null]);
          }
          /*				
          				j = (list.length > 100) ? 100 : list.length
          				for i in [0...j]
          					ppcDebug.echo(i + ': [' + list[i].rank + '] ' + list[i].text)
          
          				for i in [0...r.length]
          					if result.data.length >= max) 
          						result.more = 1
          						break
          					result.data.push([r[i], null])
          */

          if (result.data.length) {
            if (ds !== 0) {
              result.title = dic.name;
            }
            return result;
          }
        }
        this.searchSkipped++;
        ds = (ds + 1) % this.dicList.length;
        if (ds === this.selected) {
          break;
        }
      }
      return null;
    },
    kanjiSearch: function(kanji) {
      var a, b, hex, i, kde, result, _i, _len, _ref;
      readonly(hex = '0123456789ABCDEF');
      i = kanji.charCodeAt(0);
      if (i < 0x3000) {
        return null;
      }
      if (this.kanjiData != null) {
        this.kanjiData = ppcFile.read(typeof ppcKanjiURI === 'string' ? ppcKanjiURI : 'chrome://cperapera/content/kanji.dat');
      }
      kde = this.find(this.kanjiData, kanji);
      if (!(kde != null)) {
        return null;
      }
      a = kde.split('|');
      if (a.length !== 6) {
        return null;
      }
      result = {};
      result.kanji = a[0];
      result.misc = {};
      result.misc['U'] = hex[(i >>> 12) & 15] + hex[(i >>> 8) & 15] + hex[(i >>> 4) & 15] + hex[i & 15];
      _ref = a[1].split(' ');
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        b = _ref[_i];
        if (b.match(/^([A-Z]+)(.*)/)) {
          if (!result.misc[RegExp.$1]) {
            result.misc[RegExp.$1] = RegExp.$2;
          } else {
            result.misc[RegExp.$1] += " " + RegExp.$2;
          }
        }
      }
      result.onkun = a[2].replace(/\s+/g, '\u3001 ');
      result.nanori = a[3].replace(/\s+/g, '\u3001 ');
      result.bushumei = a[4].replace(/\s+/g, '\u3001 ');
      result.eigo = a[5];
      return result;
    },
    numList: ['H', 'Halpern', 'L', 'Heisig', 'E', 'Henshall', 'DK', 'Kanji Learners Dictionary', 'N', 'Nelson', 'V', 'New Nelson', 'Y', 'PinYin', 'P', 'Skip Pattern', 'IN', 'Tuttle Kanji &amp Kana', 'I', 'Tuttle Kanji Dictionary', 'U', 'Unicode'],
    /*
    		'C', 	'Classical Radical',
    		'DR',	'Father Joseph De Roo Index',
    		'DO',	'P.G. O\'Neill Index',
    		'O', 	'P.G. O\'Neill Japanese Names Index',
    		'Q', 	'Four Corner Code',
    		'MN',	'Morohashi Daikanwajiten Index',
    		'MP',	'Morohashi Daikanwajiten Volume/Page',
    		'K',	'Gakken Kanji Dictionary Index',
    		'W',	'Korean Reading',
    */

    getToneNumber: function(pinyin) {
      var p, tone1, tone2, tone3, tone4, _i, _len;
      tone1 = "\u0101\u0113\u012B\u014D\u016B\u01D6";
      tone2 = "\u00E1\u00E9\u00ED\u00F3\u00FA\u01D8";
      tone3 = "\u01CE\u011B\u01D0\u01D2\u01D4\u01DA";
      tone4 = "\u00E0\u00E8\u00EC\u00F2\u00F9\u01DC";
      for (_i = 0, _len = pinyin.length; _i < _len; _i++) {
        p = pinyin[_i];
        if (tone1.indexOf(p) !== -1) {
          return 1;
        }
        if (tone2.indexOf(p) !== -1) {
          return 2;
        }
        if (tone3.indexOf(p) !== -1) {
          return 3;
        }
        if (tone4.indexOf(p) !== -1) {
          return 4;
        }
      }
      return 5;
    },
    isChinese: function(word) {
      var x, _i, _j, _ref, _ref1, _results;
      for (x = _i = 0, _ref = word.length; 0 <= _ref ? _i < _ref : _i > _ref; x = 0 <= _ref ? ++_i : --_i) {
        if (_ref1 = word.charCodeAt(x), __indexOf.call((function() {
          _results = [];
          for (var _j = 0x3400; 0x3400 <= 0x9FFF ? _j < 0x9FFF : _j > 0x9FFF; 0x3400 <= 0x9FFF ? _j++ : _j--){ _results.push(_j); }
          return _results;
        }).apply(this), _ref1) < 0) {
          return false;
        }
      }
      return true;
    },
    makeHtml: function(entry) {
      var cfg, defn, e, hanzi, html, i, j, k, leftWord, newPopupFormat, newRight, order, pK, pinyin, rightWord, s, simp, t, trad, x, _i, _j, _k, _l, _len, _len1, _len2, _m, _n, _o, _p, _q, _ref, _ref1, _ref2, _ref3, _ref4, _ref5;
      if (!(entry != null)) {
        return '';
      }
      if (!this.isReady) {
        this.init();
      }
      newPopupFormat = false;
      html = [];
      if (entry.title) {
        html.push("<span class=\"w-title\">" + entry.title + "</span>");
      }
      cfg = exports.ppcConfig;
      if (newPopupFormat) {
        for (i = _i = 0; 0 <= entryCount ? _i < entryCount : _i > entryCount; i = 0 <= entryCount ? ++_i : --_i) {
          e = entry.data[i][0].match(/^(.+?)\s+(?:\[(.*?)\])?\s*\/(.+)\//);
          if (!e) {
            continue;
          }
          k = "";
          trad = e[1].split(" ")[0];
          simp = e[1].split(" ")[1];
          pinyin = this.parsePinyin(e[2]);
          defn = e[3];
          html.push('<table>');
          if (exports.ppcConfig.showhanzi === "boths" || exports.ppcConfig.showhanzi === "botht") {
            leftWord = exports.ppcConfig.showhanzi === "botht" ? trad : simp;
            rightWord = exports.ppcConfig.showhanzi === "botht" ? simp : trad;
            newRight = [];
            for (j = _j = 0, _ref = leftWord.length; 0 <= _ref ? _j < _ref : _j > _ref; j = 0 <= _ref ? ++_j : --_j) {
              if (leftWord[j] === rightWord[j]) {
                newRight.push(sameHanziChar);
              } else {
                newRight.push(rightWord[j]);
              }
            }
            rightWord = newRight.join('');
            html.push('<tr>');
            if (exports.ppcConfig.docolors) {
              for (j = _k = 0, _ref1 = pinyin.tones.length; 0 <= _ref1 ? _k < _ref1 : _k > _ref1; j = 0 <= _ref1 ? ++_k : --_k) {
                k += "<td class=\"hanzi_old" + pinyin.tones[j] + "\" style=\"color:" + (this.getColorForTone(pinyin.tones[j])) + "\">" + leftWord[j] + "</td>";
              }
              k += "　";
              for (j = _l = 0, _ref2 = pinyin.tones.length; 0 <= _ref2 ? _l < _ref2 : _l > _ref2; j = 0 <= _ref2 ? ++_l : --_l) {
                k += "<td class=\"hanzi_old" + pinyin.tones[j] + "\" style=\"color:" + (this.getColorForTone(pinyin.tones[j])) + "\">" + rightWord[j] + "</td>";
              }
            } else {
              k += "<span class=\"hanzi_old3\">" + leftWord + "</span> <span class=\"hanzi_old3\">" + rightWord + "</span>";
            }
          } else {
            hanzi = exports.ppcConfig.showhanzi === "simp" ? simp : trad;
            if (exports.ppcConfig.docolors) {
              for (j = _m = 0, _ref3 = pinyin.tones.length; 0 <= _ref3 ? _m < _ref3 : _m > _ref3; j = 0 <= _ref3 ? ++_m : --_m) {
                k += "<span class=\"hanzi_old" + pinyin.tones[j] + "\" style=\"color:" + (this.getColorForTone(pinyin.tones[j])) + "\">" + hanzi[j] + "</span>";
              }
            } else {
              k += "<span class=\"hanzi_old3\">" + hanzi + "</span>";
            }
          }
          k += "&#32&#32 <span class=\"pinyin_old\" style=\"color:" + exports.ppcConfig.cpinyin + "\">";
          if (exports.ppcConfig.pinyin === "tonenums") {
            k += "" + pinyin.tonenums + "</span>";
          } else if (exports.ppcConfig.pinyin === "tonemarks") {
            k += "" + pinyin.tonemarks + "</span>";
          } else if (exports.ppcConfig.pinyin === "zhuyin") {
            k += "" + pinyin.zhuyin + "</span>";
          }
          html.push(k);
          if (exports.ppcConfig.hidedef) {
            html.push('<br/>');
          } else {
            k = defn.replace(/\//g, ' ');
            if (!ppcConfig.wpos) {
              k = k.replace(/^\([^)]+\)\s*/, '');
            }
            if (!ppcConfig.wpop) {
              k = k.replace(' (P)', '');
            }
            k = k.replace('<', '[').replace('>', ']').replace('&gt ', '] ');
            html.push('<span class="defn_old">' + k + '</span>');
          }
        }
        if (entry.more) {
          html.push('...<br/>');
        }
      } else {
        t = '';
        _ref4 = entry.data;
        for (_n = 0, _len = _ref4.length; _n < _len; _n++) {
          e = _ref4[_n];
          if (!e[0].match(/^(.+?)\s+(?:\[(.*?)\])?\s*\/(.+)\//)) {
            continue;
          }
          if (s !== RegExp.$3) {
            html.push(t);
            pK = k = '';
          } else {
            k = t.length > 0 ? '<br/>' : '';
          }
          if (pK === RegExp.$1) {
            k = "\u3001 <span class=\"pinyin_old\">" + RegExp.$2 + "</span>";
          } else {
            trad = RegExp.$1.split(" ")[0];
            simp = RegExp.$1.split(" ")[1];
            pinyin = this.parsePinyin(RegExp.$2);
            defn = RegExp.$3;
            switch (cfg.showhanzi) {
              case "trad":
                order = [trad];
                break;
              case "simp":
                order = [simp];
                break;
              case "boths":
                order = [simp, trad];
                break;
              case "botht":
                order = [trad, simp];
            }
            if (true) {
              if (order.length === 2) {
                order[1] = ((function() {
                  var _o, _ref5, _results;
                  _results = [];
                  for (x = _o = 0, _ref5 = order[0].length; 0 <= _ref5 ? _o < _ref5 : _o > _ref5; x = 0 <= _ref5 ? ++_o : --_o) {
                    if (order[0][x] === order[1][x] && this.isChinese(order[1][x])) {
                      _results.push('\u30FB');
                    } else {
                      _results.push(order[1][x]);
                    }
                  }
                  return _results;
                }).call(this)).join("");
              }
            }
            if (cfg.docolors) {
              for (_o = 0, _len1 = order.length; _o < _len1; _o++) {
                hanzi = order[_o];
                for (j = _p = 0, _ref5 = hanzi.length; 0 <= _ref5 ? _p < _ref5 : _p > _ref5; j = 0 <= _ref5 ? ++_p : --_p) {
                  k += "<span class=\"hanzi_old" + pinyin.tones[j] + "\" style=\"color:" + (this.getColorForTone(pinyin.tones[j])) + ";\">										" + hanzi[j] + "									</span>";
                }
              }
            } else {
              for (_q = 0, _len2 = order.length; _q < _len2; _q++) {
                hanzi = order[_q];
                k += "<span class=\"hanzi_old3\">									" + hanzi + "								</span>";
              }
            }
            k += "&#32;&#32; <span class=\"pinyin_old\" style=\"color:" + cfg.cpinyin + ";\">";
            switch (cfg.pinyin) {
              case "tonenums":
                k += pinyin.tonenums;
                break;
              case "tonemarks":
                k += pinyin.tonemarks;
                break;
              case "zhuyin":
                k += pinyin.zhuyin;
            }
          }
          pK = RegExp.$1;
          html.push(k);
          s = defn;
          if (cfg.hidedef) {
            t = '<br/>';
          } else {
            t = s.replace(/\//g, '; ');
            if (!cfg.wpos) {
              t = t.replace(/^\([^)]+\)\s*/, '');
            }
            if (!cfg.wpop) {
              t = t.replace('; (P)', '');
            }
            t = t.replace('<', '[').replace('>', ']').replace('&gt ', '] ');
            t = "<span class=\"defn_old\"> 							" + t + "						</span>";
          }
        }
        html.push(t);
        if (entry.more) {
          html.push('...<br/>');
        }
      }
      return html.join('');
    },
    getColorForTone: function(toneNum) {
      switch (toneNum) {
        case 1:
          return exports.ppcConfig.cpick1;
        case 2:
          return exports.ppcConfig.cpick2;
        case 3:
          return exports.ppcConfig.cpick3;
        case 4:
          return exports.ppcConfig.cpick4;
        case 5:
          return exports.ppcConfig.cpick5;
      }
      return null;
    },
    makeText: function(entry, max) {
      var e, i, j, t, text, _i, _j, _ref;
      if (!(entry != null)) {
        return '';
      }
      if (!this.isReady) {
        this.init();
      }
      text = [];
      if (entry.kanji) {
        text.push(entry.kanji + '\n');
        text.push((entry.eigo.length > 0 ? entry.eigo : '-') + '\n');
        text.push(entry.onkun.replace(/\.([^\u3001]+)/g, '\uFF08$1\uFF09') + '\n');
        if (entry.nanori.length) {
          text.push('\u540D\u4E57\u308A\t' + entry.nanori + '\n');
        }
        if (entry.bushumei.length) {
          text.push('\u90E8\u9996\u540D\t' + entry.bushumei + '\n');
        }
        for (i = _i = 0, _ref = this.numList.length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
          e = this.numList[i];
          if (this.kanjiShown[e]) {
            j = entry.misc[e];
            text.push(this.numList[i + 1].replace('&amp', '&') + '\t' + (j != null ? j : '-') + '\n');
          }
        }
      } else {
        if (max > entry.data.length) {
          max = entry.data.length;
        }
        for (i = _j = 0; 0 <= max ? _j < max : _j > max; i = 0 <= max ? ++_j : --_j) {
          e = entry.data[i][0].match(/^(.+?)\s+(?:\[(.*?)\])?\s*\/(.+)\//);
          if (!e) {
            continue;
          }
          if (e[2]) {
            text.push(e[1] + '\t' + e[2]);
          } else {
            text.push(e[1]);
          }
          t = e[3].replace(/\//g, ' ');
          if (!ppcConfig.wpos) {
            t = t.replace(/^\([^)]+\)\s*/, '');
          }
          if (!ppcConfig.wpop) {
            t = t.replace(' (P)', '');
          }
          text.push('\t' + t + '\n');
        }
      }
      return text.join('');
    },
    find: function(data, text) {
      var beg, end, i, mi, mis, tlen;
      readonly(tlen = text.length);
      beg = 0;
      end = data.length - 1;
      while (beg < end) {
        mi = (beg + end) >> 1;
        i = data.lastIndexOf('\n', mi) + 1;
        mis = data.substr(i, tlen);
        if (text < mis) {
          end = i - 1;
        } else if (text > mis) {
          beg = data.indexOf('\n', mi + 1) + 1;
        } else {
          return data.slice(i, data.indexOf('\n', mi + 1));
        }
      }
    },
    pinyinref: ['a', 'ai', 'an', 'ang', 'ao', 'ba', 'bai', 'ban', 'bang', 'bao', 'bei', 'ben', 'beng', 'bi', 'bian', 'biao', 'bie', 'bin', 'bing', 'bo', 'bu', 'ca', 'cai', 'can', 'cang', 'cao', 'ce', 'cen', 'ceng', 'cha', 'chai', 'chan', 'chang', 'chao', 'che', 'chen', 'cheng', 'chi', 'chong', 'chou', 'chu', 'chua', 'chuai', 'chuan', 'chuang', 'chui', 'chun', 'chuo', 'ci', 'cong', 'cou', 'cu', 'cuan', 'cui', 'cun', 'cuo', 'da', 'dai', 'dan', 'dang', 'dao', 'de', 'deng', 'di', 'dian', 'diang', 'diao', 'die', 'ding', 'diu', 'dong', 'dou', 'du', 'duan', 'dui', 'dun', 'duo', 'e', 'ei', 'en', 'er', 'fa', 'fan', 'fang', 'fei', 'fen', 'feng', 'fo', 'fou', 'fu', 'ga', 'gai', 'gan', 'gang', 'gao', 'ge', 'gei', 'gen', 'geng', 'gong', 'gou', 'gu', 'gua', 'guai', 'guan', 'guang', 'gui', 'gun', 'guo', 'ha', 'hai', 'han', 'hang', 'hao', 'he', 'hei', 'hen', 'heng', 'hong', 'hou', 'hu', 'hua', 'huai', 'huan', 'huang', 'hui', 'hun', 'huo', 'ji', 'jia', 'jian', 'jiang', 'jiao', 'jie', 'jin', 'jing', 'jiong', 'jiu', 'ju', 'juan', 'jue', 'jun', 'ka', 'kai', 'kan', 'kang', 'kao', 'ke', 'ken', 'keng', 'kong', 'kou', 'ku', 'kua', 'kuai', 'kuan', 'kuang', 'kui', 'kun', 'kuo', 'la', 'lai', 'lan', 'lang', 'lao', 'le', 'lei', 'leng', 'li', 'lian', 'liang', 'liao', 'lie', 'lin', 'ling', 'liu', 'long', 'lou', 'lu', 'l\u00FC', 'luan', 'l\u00FCe', 'lun', 'luo', 'ma', 'mai', 'man', 'mang', 'mao', 'me', 'mei', 'men', 'meng', 'mi', 'mian', 'miao', 'mie', 'min', 'ming', 'miu', 'mo', 'mou', 'mu', 'na', 'nai', 'nan', 'nang', 'nao', 'ne', 'nei', 'nen', 'neng', 'ni', 'nia', 'nian', 'niang', 'niao', 'nie', 'nin', 'ning', 'niu', 'nong', 'nou', 'nu', 'n\u00FC', 'nuan', 'n\u00FCe', 'nuo', 'nun', 'ou', 'pa', 'pai', 'pan', 'pang', 'pao', 'pei', 'pen', 'peng', 'pi', 'pian', 'piao', 'pie', 'pin', 'ping', 'po', 'pou', 'pu', 'qi', 'qia', 'qian', 'qiang', 'qiao', 'qie', 'qin', 'qing', 'qiong', 'qiu', 'qu', 'quan', 'que', 'qun', 'ran', 'rang', 'rao', 're', 'ren', 'reng', 'ri', 'rong', 'rou', 'ru', 'ruan', 'rui', 'run', 'ruo', 'sa', 'sai', 'san', 'sang', 'sao', 'se', 'sei', 'sen', 'seng', 'sha', 'shai', 'shan', 'shang', 'shao', 'she', 'shei', 'shen', 'sheng', 'shi', 'shong', 'shou', 'shu', 'shua', 'shuai', 'shuan', 'shuang', 'shui', 'shun', 'shuo', 'si', 'song', 'sou', 'su', 'suan', 'sui', 'sun', 'suo', 'ta', 'tai', 'tan', 'tang', 'tao', 'te', 'teng', 'ti', 'tian', 'tiao', 'tie', 'ting', 'tong', 'tou', 'tu', 'tuan', 'tui', 'tun', 'tuo', 'wa', 'wai', 'wan', 'wang', 'wei', 'wen', 'weng', 'wo', 'wu', 'xi', 'xia', 'xian', 'xiang', 'xiao', 'xie', 'xin', 'xing', 'xiong', 'xiu', 'xu', 'xuan', 'xue', 'xun', 'ya', 'yai', 'yan', 'yang', 'yao', 'ye', 'yi', 'yin', 'ying', 'yo', 'yong', 'you', 'yu', 'yuan', 'yue', 'yun', 'za', 'zai', 'zan', 'zang', 'zao', 'ze', 'zei', 'zen', 'zeng', 'zha', 'zhai', 'zhan', 'zhang', 'zhao', 'zhe', 'zhei', 'zhen', 'zheng', 'zhi', 'zhong', 'zhou', 'zhu', 'zhua', 'zhuai', 'zhuan', 'zhuang', 'zhui', 'zhun', 'zhuo', 'zi', 'zong', 'zou', 'zu', 'zuan', 'zui', 'zun', 'zuo'],
    zhuyinref: ['\u311A', '\u311E', '\u3122', '\u3124', '\u3120', '\u3105\u311A', '\u3105\u311E', '\u3105\u3122', '\u3105\u3124', '\u3105\u3120', '\u3105\u311F', '\u3105\u3123', '\u3105\u3125', '\u3105\u30FC', '\u3105\u30FC\u3122', '\u3105\u30FC\u3120', '\u3105\u30FC\u311D', '\u3105\u30FC\u3123', '\u3105\u30FC\u3125', '\u3105\u311B', '\u3105\u3128', '\u3118\u311A', '\u3118\u311E', '\u3118\u3122', '\u3118\u3124', '\u3118\u3120', '\u3118\u311C', '\u3118\u3123', '\u3118\u3125', '\u3114\u311A', '\u3114\u311E', '\u3114\u3122', '\u3114\u3124', '\u3114\u3120', '\u3114\u311C', '\u3114\u3123', '\u3114\u3125', '\u3114', '\u3114\u3128\u3125', '\u3114\u3121', '\u3114\u3128', '\u3114\u3128\u311A', '\u3114\u3128\u311E', '\u3114\u3128\u3122', '\u3114\u3128\u3124', '\u3114\u3128\u311F', '\u3114\u3128\u3123', '\u3114\u3128\u311B', '\u3118', '\u3118\u3128\u3125', '\u3118\u3121', '\u3118\u3128', '\u3118\u3128\u3122', '\u3118\u3128\u311F', '\u3118\u3128\u3123', '\u3118\u3128\u311B', '\u3109\u311A', '\u3109\u311E', '\u3109\u3122', '\u3109\u3124', '\u3109\u3120', '\u3109\u311C', '\u3109\u3125', '\u3109\u30FC', '\u3109\u30FC\u3122', '\u3109\u30FC\u3124', '\u3109\u30FC\u3120', '\u3109\u30FC\u311D', '\u3109\u30FC\u3125', '\u3109\u30FC\u3121', '\u3109\u3128\u3125', '\u3109\u3121', '\u3109\u3128', '\u3109\u3128\u3122', '\u3109\u3128\u311F', '\u3109\u3128\u3123', '\u3109\u3128\u311B', '\u311C', '\u311F', '\u3123', '\u3126', '\u3108\u311A', '\u3108\u3122', '\u3108\u3124', '\u3108\u311F', '\u3108\u3123', '\u3108\u3125', '\u3108\u311B', '\u3108\u3121', '\u3108\u3128', '\u310D\u311A', '\u310D\u311E', '\u310D\u3122', '\u310D\u3124', '\u310D\u3120', '\u310D\u311C', '\u310D\u311F', '\u310D\u3123', '\u310D\u3125', '\u310D\u3128\u3125', '\u310D\u3121', '\u310D\u3128', '\u310D\u3128\u311A', '\u310D\u3128\u311E', '\u310D\u3128\u3122', '\u310D\u3128\u3124', '\u310D\u3128\u311F', '\u310D\u3128\u3123', '\u310D\u3128\u311B', '\u310F\u311A', '\u310F\u311E', '\u310F\u3122', '\u310F\u3124', '\u310F\u3120', '\u310F\u311C', '\u310F\u311F', '\u310F\u3123', '\u310F\u3125', '\u310F\u3128\u3125', '\u310F\u3121', '\u310F\u3128', '\u310F\u3128\u311A', '\u310F\u3128\u311E', '\u310F\u3128\u3122', '\u310F\u3128\u3124', '\u310F\u3128\u311F', '\u310F\u3128\u3123', '\u310F\u3128\u311B', '\u3110\u30FC', '\u3110\u30FC\u311A', '\u3110\u30FC\u3122', '\u3110\u30FC\u3124', '\u3110\u30FC\u3120', '\u3110\u30FC\u311D', '\u3110\u30FC\u3123', '\u3110\u30FC\u3125', '\u3110\u3129\u3125', '\u3110\u30FC\u3121', '\u3110\u3129', '\u3110\u3129\u3122', '\u3110\u3129\u311D', '\u3110\u3129\u3123', '\u310E\u311A', '\u310E\u311E', '\u310E\u3122', '\u310E\u3124', '\u310E\u3120', '\u310E\u311C', '\u310E\u3123', '\u310E\u3125', '\u310E\u3128\u3125', '\u310E\u3121', '\u310E\u3128', '\u310E\u3128\u311A', '\u310E\u3128\u311E', '\u310E\u3128\u3122', '\u310E\u3128\u3124', '\u310E\u3128\u311F', '\u310E\u3128\u3123', '\u310E\u3128\u311B', '\u310C\u311A', '\u310C\u311E', '\u310C\u3122', '\u310C\u3124', '\u310C\u3120', '\u310C\u311C', '\u310C\u311F', '\u310C\u3125', '\u310C\u30FC', '\u310C\u30FC\u3122', '\u310C\u30FC\u3124', '\u310C\u30FC\u3120', '\u310C\u30FC\u311D', '\u310C\u30FC\u3123', '\u310C\u30FC\u3125', '\u310C\u30FC\u3121', '\u310C\u3128\u3125', '\u310C\u3121', '\u310C\u3128', '\u310C\u3129', '\u310C\u3128\u3122', '\u310C\u3129\u311D', '\u310C\u3128\u3123', '\u310C\u3128\u311B', '\u3107\u311A', '\u3107\u311E', '\u3107\u3122', '\u3107\u3124', '\u3107\u3120', '\u3107\u311C', '\u3107\u311F', '\u3107\u3123', '\u3107\u3125', '\u3107\u30FC', '\u3107\u30FC\u3122', '\u3107\u30FC\u3120', '\u3107\u30FC\u311D', '\u3107\u30FC\u3123', '\u3107\u30FC\u3125', '\u3107\u30FC\u3121', '\u3107\u311B', '\u3107\u3121', '\u3107\u3128', '\u310B\u311A', '\u310B\u311E', '\u310B\u3122', '\u310B\u3124', '\u310B\u3120', '\u310B\u311B', '\u310B\u311F', '\u310B\u3123', '\u310B\u3125', '\u310B\u30FC', '\u310B\u30FC\u311A', '\u310B\u30FC\u3122', '\u310B\u30FC\u3124', '\u310B\u30FC\u3120', '\u310B\u30FC\u311D', '\u310B\u30FC\u3123', '\u310B\u30FC\u3125', '\u310B\u30FC\u3121', '\u310B\u3128\u3125', '\u310B\u3121', '\u310B\u3128', '\u310B\u3129', '\u310B\u3128\u3122', '\u310B\u3129\u311D', '\u310B\u3128\u311B', '\u310B\u3128\u3123', '\u3121', '\u3106\u311A', '\u3106\u311E', '\u3106\u3122', '\u3106\u3124', '\u3106\u3120', '\u3106\u311F', '\u3106\u3123', '\u3106\u3125', '\u3106\u30FC', '\u3106\u30FC\u3122', '\u3106\u30FC\u3120', '\u3106\u30FC\u311D', '\u3106\u30FC\u3123', '\u3106\u30FC\u3125', '\u3106\u311B', '\u3106\u3121', '\u3106\u3128', '\u3111\u30FC', '\u3111\u30FC\u311A', '\u3111\u30FC\u3122', '\u3111\u30FC\u3124', '\u3111\u30FC\u3120', '\u3111\u30FC\u311D', '\u3111\u30FC\u3123', '\u3111\u30FC\u3125', '\u3111\u3129\u3125', '\u3111\u30FC\u3121', '\u3111\u3129', '\u3111\u3129\u3122', '\u3111\u3129\u311D', '\u3111\u3129\u3123', '\u3116\u3122', '\u3116\u3124', '\u3116\u3120', '\u3116\u311C', '\u3116\u3123', '\u3116\u3125', '\u3116', '\u3116\u3128\u3125', '\u3116\u3121', '\u3116\u3128', '\u3116\u3128\u3122', '\u3116\u3128\u311F', '\u3116\u3128\u3123', '\u3116\u3128\u311B', '\u3119\u311A', '\u3119\u311E', '\u3119\u3122', '\u3119\u3124', '\u3119\u3120', '\u3119\u311C', '\u3119\u311F', '\u3119\u3123', '\u3119\u3125', '\u3115\u311A', '\u3115\u311E', '\u3115\u3122', '\u3115\u3124', '\u3115\u3120', '\u3115\u311C', '\u3115\u311F', '\u3115\u3123', '\u3115\u3125', '\u3115', '\u3115\u3128\u3125', '\u3115\u3121', '\u3115\u3128', '\u3115\u3128\u311A', '\u3115\u3128\u311E', '\u3115\u3128\u3122', '\u3115\u3128\u3124', '\u3115\u3128\u311F', '\u3115\u3128\u3123', '\u3115\u3128\u311B', '\u3119', '\u3119\u3128\u3125', '\u3119\u3121', '\u3119\u3128', '\u3119\u3128\u3122', '\u3119\u3128\u311F', '\u3119\u3128\u3123', '\u3119\u3128\u311B', '\u310A\u311A', '\u310A\u311E', '\u310A\u3122', '\u310A\u3124', '\u310A\u3120', '\u310A\u311C', '\u310A\u3125', '\u310A\u30FC', '\u310A\u30FC\u3122', '\u310A\u30FC\u3120', '\u310A\u30FC\u311D', '\u310A\u30FC\u3125', '\u310A\u3128\u3125', '\u310A\u3121', '\u310A\u3128', '\u310A\u3128\u3122', '\u310A\u3128\u311F', '\u310A\u3128\u3123', '\u310A\u3128\u311B', '\u3128\u311A', '\u3128\u311E', '\u3128\u3122', '\u3128\u3124', '\u3128\u311F', '\u3128\u3123', '\u3128\u3125', '\u3128\u311B', '\u3128', '\u3112\u30FC', '\u3112\u30FC\u311A', '\u3112\u30FC\u3122', '\u3112\u30FC\u3124', '\u3112\u30FC\u3120', '\u3112\u30FC\u311D', '\u3112\u30FC\u3123', '\u3112\u30FC\u3125', '\u3112\u3129\u3125', '\u3112\u30FC\u3121', '\u3112\u3129', '\u3112\u3129\u3122', '\u3112\u3129\u311D', '\u3112\u3129\u3123', '\u30FC\u311A', '\u30FC\u311E', '\u30FC\u3122', '\u30FC\u3124', '\u30FC\u3120', '\u30FC\u311D', '\u30FC', '\u30FC\u3123', '\u30FC\u3125', '\u30FC\u311B', '\u3129\u3125', '\u30FC\u3121', '\u3129', '\u3129\u3122', '\u3129\u311D', '\u3129\u3123', '\u3117\u311A', '\u3117\u311E', '\u3117\u3122', '\u3117\u3124', '\u3117\u3120', '\u3117\u311C', '\u3117\u311F', '\u3117\u3123', '\u3117\u3125', '\u3113\u311A', '\u3113\u311E', '\u3113\u3122', '\u3113\u3124', '\u3113\u3120', '\u3113\u311C', '\u3113\u311F', '\u3113\u3123', '\u3113\u3125', '\u3113', '\u3113\u3128\u3125', '\u3113\u3121', '\u3113\u3128', '\u3113\u3128\u311A', '\u3113\u3128\u311E', '\u3113\u3128\u3122', '\u3113\u3128\u3124', '\u3113\u3128\u311F', '\u3113\u3128\u3123', '\u3113\u3128\u311B', '\u3117', '\u3117\u3128\u3125', '\u3117\u3121', '\u3117\u3128', '\u3117\u3128\u3122', '\u3117\u3128\u311F', '\u3117\u3128\u3123', '\u3117\u3128\u311B'],
    parsePinyin: function(pinyin) {
      var indx, j, k, pin, prepin, result, tone, tonenums, zhuyin, ztone, _a, _e, _i, _j, _k, _len, _o, _ref, _u, _v;
      _a = ["\u0101", "\u00E1", "\u01CE", "\u00E0", "a"];
      _e = ["\u0113", "\u00E9", "\u011B", "\u00E8", "e"];
      _i = ["\u012B", "\u00ED", "\u01D0", "\u00EC", "i"];
      _o = ["\u014D", "\u00F3", "\u01D2", "\u00F2", "o"];
      _u = ["\u016B", "\u00FA", "\u01D4", "\u00F9", "u"];
      _v = ["\u01D6", "\u01D8", "\u01DA", "\u01DC", "\u00FC"];
      ztone = ['', '\u02CA', '\u02C7', '\u02CB', '\u30FB'];
      result = {
        tones: []
      };
      zhuyin = [];
      tonenums = [];
      pinyin = pinyin.split(" ");
      for (j = _j = 0, _len = pinyin.length; _j < _len; j = ++_j) {
        pin = pinyin[j];
        pin = pin.replace('u:', "\u00FC");
        tonenums.push(pin);
        if (pin.indexOf("1") !== -1) {
          tone = 0;
        } else if (pin.indexOf("2") !== -1) {
          tone = 1;
        } else if (pin.indexOf("3") !== -1) {
          tone = 2;
        } else if (pin.indexOf("4") !== -1) {
          tone = 3;
        } else {
          tone = 4;
        }
        result.tones.push(tone + 1);
        prepin = pin.slice(0, -1);
        indx = this.pinyinref.indexOf(prepin.toLowerCase());
        zhuyin.push(this.zhuyinref[indx] + ztone[tone]);
        if (pin.indexOf("a") !== -1) {
          pin = pin.replace("a", _a[tone]);
        } else if (pin.indexOf("e") !== -1) {
          pin = pin.replace("e", _e[tone]);
        } else if (pin.indexOf("ou") !== -1) {
          pin = pin.replace("o", _o[tone]);
        } else {
          for (k = _k = _ref = pin.length - 1; _ref <= 0 ? _k <= 0 : _k >= 0; k = _ref <= 0 ? ++_k : --_k) {
            if (this.isVowel(pin[k])) {
              switch (pin[k]) {
                case 'i':
                  pin = pin.replace("i", _i[tone]);
                  break;
                case 'o':
                  pin = pin.replace("o", _o[tone]);
                  break;
                case 'u':
                  pin = pin.replace("u", _u[tone]);
                  break;
                case '\u00FC':
                  pin = pin.replace("\u00FC", _v[tone]);
              }
              break;
            }
          }
        }
        pinyin[j] = pin.slice(0, -1);
      }
      result.tonemarks = pinyin.join(" ");
      result.zhuyin = zhuyin.join(" ");
      result.tonenums = tonenums.join(" ");
      return result;
    },
    isVowel: function(letter) {
      return letter === "a" || letter === "e" || letter === "i" || letter === "o" || letter === "u" || letter === "\u00FC";
    }
  };

  exports.ppcFile = {
    read: function(uri) {
      var buffer, in_stream, inp, s;
      inp = Components.classes['@mozilla.org/network/io-service;1'].getService(Components.interfaces.nsIIOService).newChannel(uri, null, null).open();
      in_stream = Components.classes['@mozilla.org/intl/converter-input-stream;1'].createInstance(Components.interfaces.nsIConverterInputStream);
      in_stream.init(inp, 'UTF-8', 4 * 1024 * 1024, Components.interfaces.nsIConverterInputStream.DEFAULT_REPLACEMENT_CHARACTER);
      buffer = '';
      s = {};
      while (in_stream.readString(-1, s) > 0) {
        buffer += s.value;
      }
      in_stream.close();
      return buffer;
    },
    readArray: function(name) {
      var a;
      a = this.read(name).split('\n');
      while ((a.length > 0) && (a[a.length - 1].length === 0)) {
        a.pop();
      }
      return a;
    }
  };

  exports.ppcDb = (function() {

    function ppcDb(name) {
      this.name = name;
    }

    ppcDb.prototype.open = function() {
      var f, id, nm;
      if (this.name.match(/(.+)\|(.+)/)) {
        id = RegExp.$1;
        nm = RegExp.$2;
        try {
          f = Components.classes['@mozilla.org/extensions/manager;1'].getService(Components.interfaces.nsIExtensionManager).getInstallLocation(id).getItemFile(id, nm);
        } catch (ex) {
          if (exports.ppcData.dicPath && exports.ppcData.dicPath[id]) {
            f = Components.classes['@mozilla.org/file/local;1'].createInstance(Components.interfaces.nsILocalFile);
            f.initWithPath(exports.ppcData.dicPath[id]);
            f.append(nm);
          }
          if (!f) {
            throw "Could not find or open " + id + "/" + nm;
          }
          /*
          				if !f) 
          					f = Components.classes['@mozilla.org/file/directory_service1']
          						.getService(Components.interfaces.nsIProperties)
          						.get('ProfD', Components.interfaces.nsIFile)
          					f.append('extensions')
          					f.append(id)
          					f.append(nm)
          					if !f.exists()) 
          						f = Components.classes['@mozilla.org/file/directory_service1']
          							.getService(Components.interfaces.nsIProperties)
          							.get('APlugns', Components.interfaces.nsIFile).parent
          						f.append('extensions')
          						f.append(id)
          						f.append(nm)
          */

        }
      } else {
        f = Components.classes['@mozilla.org/file/local;1'].createInstance(Components.interfaces.nsILocalFile);
        f.initWithPath(this.name);
      }
      if (!f.isWritable()) {
        f.permissions |= 0x180;
      }
      return this.db = Components.classes['@mozilla.org/storage/service;1'].getService(Components.interfaces.mozIStorageService).openDatabase(f);
    };

    ppcDb.prototype.close = function() {
      if (this.db != null) {
        try {
          this.db.close();
        } catch (ex) {

        }
        return this.db = null;
      }
    };

    ppcDb.prototype.exec = function(stm) {
      var i, r, rows, st, _i, _j, _ref, _ref1;
      if (!(this.db != null)) {
        this.open();
      }
      rows = [];
      st = this.db.createStatement(stm);
      for (i = _i = _ref = arguments.length - 1; _ref <= 0 ? _i < 0 : _i > 0; i = _ref <= 0 ? ++_i : --_i) {
        if (arguments[i] != null) {
          st.bindUTF8StringParameter(i - 1, arguments[i]);
        }
      }
      while (st.executeStep()) {
        r = [];
        for (i = _j = 0, _ref1 = st.columnCount; 0 <= _ref1 ? _j < _ref1 : _j > _ref1; i = 0 <= _ref1 ? ++_j : --_j) {
          r[st.getColumnName(i)] = st.getUTF8String(i);
        }
        rows.push(r);
      }
      return rows;
    };

    ppcDb.prototype.indexExists = function(index) {
      if (!(this.db != null)) {
        this.open();
      }
      return this.db.indexExists(index);
    };

    ppcDb.prototype.beginTransaction = function() {
      if (!(this.db != null)) {
        this.open();
      }
      return this.db.beginTransaction();
    };

    ppcDb.prototype.commitTransaction = function() {
      return this.db.commitTransaction();
    };

    ppcDb.prototype.rollbackTransaction = function() {
      return this.db.rollbackTransaction();
    };

    return ppcDb;

  })();

  exports.ppcDic = (function() {

    function ppcDic(dic) {
      this.name = dic.name;
      this.version = dic.version;
      this.id = dic.id;
      this.hasType = dic.hasType;
      this.isName = dic.isName;
    }

    ppcDic.prototype.open = function() {
      try {
        if (this.rdb != null) {
          return;
        }
        this.rdb = new exports.ppcDb(this.id + '|dict.sqlite');
        this.rdb.open();
        this.checkIndex('simp');
        return this.checkIndex('trad');
      } catch (ex) {
        this.close();
        throw ex;
      }
    };

    ppcDic.prototype.close = function() {
      if (this.rdb != null) {
        try {
          this.rdb.close();
        } catch (ex) {

        }
        return this.rdb = null;
      }
    };

    ppcDic.prototype.checkIndex = function(name) {
      var ix;
      ix = "ix_" + name;
      if (this.rdb.indexExists(ix)) {
        return;
      }
      if (!exports.ppcData.indexCreateNotice) {
        alert('A dictionary index needs to be created. This may take a while on some systems. Click OK to start.');
        ppcData.indexCreateNotice = true;
      }
      return this.rdb.exec("CREATE INDEX " + ix + " ON dict (" + name + " ASC)");
    };

    ppcDic.prototype.find = function(query, arg1) {
      var entries, r, x, _i, _len;
      if (!(this.rdb != null)) {
        this.open();
      }
      entries = [];
      r = this.rdb.exec(query, arg1);
      for (_i = 0, _len = r.length; _i < _len; _i++) {
        x = r[_i];
        if (x.entry.length === 0) {
          continue;
        }
        if (x.entry.slice(-1) === '/') {
          entries.push(x.entry);
        } else {
          entries.push("" + x.trad + " " + x.simp + " [" + x.pinyin + "] /" + x.entry + "/");
        }
      }
      return entries;
    };

    ppcDic.prototype.findWord = function(word) {
      return this.find('SELECT * FROM dict WHERE simp=?1 OR trad=?1 LIMIT 100', word);
    };

    ppcDic.prototype.findText = function(text) {
      return this.find('SELECT * FROM dict WHERE entry LIKE ?1 LIMIT 300', "%" + text + "%");
    };

    return ppcDic;

  })();

}).call(this);
